namespace com.ibm.streamsx.cybersecurity.sample ;

use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.enrichment::* ;
use com.ibm.streams.cybersecurity.types::* ;
use com.ibm.streams.cybersecurity.tagging::BWListTagger ;
use com.ibm.streams.cybersecurity.analytics::* ;
use com.ibm.streams.cybersecurity.types::DomainProfilingInput_t ;
use com.ibm.streams.cybersecurity.types::DomainProfilingResult_t ;

public composite DomainProfilingBasic
{
	graph
		(stream<DomainProfilingInput_t> BWTaggerOp_Stream) as BWTaggerOp =
			BWListTagger(DPSrcOp_Stream)
		{
			param
				domainAttr : questionName ;
				blackDomainFile : getThisToolkitDir() + "/opt/bwlist/domainBlackList.txt" ;
				blackIPFile : getThisToolkitDir() + "/opt/bwlist/ipBlackList.txt" ;
				whiteDomainFile : getThisToolkitDir() + "/opt/bwlist/domainWhiteList.txt" ;
				whiteIPFile : getThisToolkitDir() + "/opt/bwlist/ipWhiteList.txt" ;
			output
				BWTaggerOp_Stream : bwTag = getDomainTags()[0] ;
		}

		(stream<DomainProfilingInput_t> DomainProfilingInput_Stream) as BWFilter =
			Filter(BWTaggerOp_Stream)
		{
			param
				filter : bwTag != whiteList;
		}

		(stream<DomainProfilingResult_t> DomainProfilingOp_Stream) as
			DomainProfilingOp = DomainProfiling(DomainProfilingInput_Stream)
		{
			window
				DomainProfilingInput_Stream : tumbling, time(20.0), partitioned ;
			param
				warmupFile : getThisToolkitDir() + "/etc/DomainProfilingWarmup.txt" ;
			output
				DomainProfilingOp_Stream : domain = getDomain(), profileLastUpdate =
					getProfileLastUpdate(), predictedClass = getPredictedClass(),
					featureVector = getFeatureVector() ;
		}

		(stream<DPDNSResponseMessage_t> DPSrcOp_Stream) as DPSrcOp = DPSrc()
		{
			param
				directory : getThisToolkitDir() + "/opt/" ;
				pattern : "domain_profiling_sample.pcap" ;
		}


		(stream<DomainProfilingResult_t> Suspicious_Stream ;
			stream<DomainProfilingResult_t> Benign_Stream) as PredictionFilter =
			Filter(DomainProfilingOp_Stream as inputStream)
		{
			param
				filter : predictedClass == "suspicious" ;
		}

		stream<rstring result> Result = Custom(Benign_Stream as I; Suspicious_Stream as J){
			logic
				onTuple I : {
					printStringLn((rstring)I);
					submit ({result=""}, Result);
				}
				onTuple J : {
					printStringLn((rstring)J);
					submit ({result=""}, Result);
				}
		}
}




