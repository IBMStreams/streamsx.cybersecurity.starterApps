namespace com.ibm.streamsx.cybersecurity.sample ;

use com.ibm.streamsx.network.parse::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.enrichment::* ;
use com.ibm.streams.cybersecurity.types::* ;
use com.ibm.streams.cybersecurity.tagging::BWListTagger ;
use com.ibm.streams.cybersecurity.analytics::* ;
use com.ibm.streams.cybersecurity.types::DomainProfilingInput_t ;
use com.ibm.streams.cybersecurity.types::DomainProfilingResult_t ;

composite DomainProfilingBasic
{
	graph
		(stream<DPDNSResponseMessage_t, tuple<BWListTag_e domainTags,
			list<BWListTag_e> ipTags>> BWTaggerOp_Stream) as BWTaggerOp =
			BWListTagger(DPSrcOp_Stream)
		{
			param
				domainAttr : questionName ;
				ipAttr : concat(answerData, additionalData) ;
				blackDomainFile : "bwlist/domainBlackList.txt" ;
				blackIPFile : "bwlist/ipBlackList.txt" ;
				whiteDomainFile : "bwlist/domainWhiteList.txt" ;
				whiteIPFile : "bwlist/ipWhiteList.txt" ;
			output
				BWTaggerOp_Stream : domainTags = getDomainTags(), ipTags = getIPTags() ;
		}

		(stream<DomainProfilingInput_t> BWFilter_Stream) as BWFilter =
			Custom(BWTaggerOp_Stream as inPort0Alias)
		{
			logic
				onTuple inPort0Alias :
				{
					mutable BWListTag_e tag_ = nonMatched ;
					if(domainTags == blackListDomain)
					{
						tag_ = blackListDomain ;
					}

					else if(has(ipTags, blackListIP))
					{
						tag_ = blackListIP ;
					}

					else if(domainTags == whiteList || has(ipTags, whiteList))
					{
						tag_ = whiteList ;
					}

					if(tag_ != whiteList)
					{
						mutable BWFilter_Stream outTuple =(BWFilter_Stream) { } ;
						assignFrom(outTuple, inPort0Alias) ;
						outTuple.bwTag = tag_ ;
						submit(outTuple, BWFilter_Stream) ;
					}

				}

			}

		(stream<DomainProfilingResult_t> DomainProfilingOp_Stream) as
			DomainProfilingOp = DomainProfiling(BWFilter_Stream)
			{
				window
					BWFilter_Stream : tumbling, time(20.0), partitioned ;
				param
					warmupFile : "etc/DomainProfilingWarmup.txt" ;
				output
					DomainProfilingOp_Stream : domain = getDomain(), profileLastUpdate =
						getProfileLastUpdate(), predictedClass = getPredictedClass(),
						featureVector = getFeatureVector() ;
			}

		(stream<DPDNSResponseMessage_t> DPSrcOp_Stream) as DPSrcOp = DPSrcBasic()
			{
				param
					directory : dataDirectory() ;
					pattern : "domain_profiling_sample.pcap" ;
			}

		() as SuspiciousSink = FileSink(Suspicious_Stream as inPort0Alias)
			{
				param
					file : "dpresults_suspicious.csv" ;
					format : csv ;
					quoteStrings : false ;
			}

		(stream<DomainProfilingResult_t> Suspicious_Stream ;
			stream<DomainProfilingResult_t> Benign_Stream) as PredictionFilter =
				Filter(DomainProfilingOp_Stream as inputStream)
			{
				param
					filter : predictedClass == "suspicious" ;
			}

		() as BenignSink = FileSink(Benign_Stream)
			{
				param
					file : "dpresults_benign.csv" ;
					format : csv ;
					quoteStrings : false ;
			}

		() as MetricsSink_12 = MetricsSink(DomainProfilingOp_Stream)
			{
				logic
					state : 
					{
						mutable int64 benignCnt = 0ul;
						mutable int64 suspiciousCnt = 0ul;
					}
					onTuple DomainProfilingOp_Stream:
					{
						if(DomainProfilingOp_Stream.predictedClass == "benign")
						{
							benignCnt++;
						}
						else
						{
							suspiciousCnt++;
						}
					}
				param
					metrics : benignCnt, suspiciousCnt ;
					names : "nBenignDomains", "nSuspiciousDomains";
					initialValues : 0l, 0l;
			}

	}

	composite DPSrcBasic(output DNSMsgParser_Stream )
	{
		param
			expression<rstring> $directory ;
			expression<rstring> $pattern : "" ;
			expression<rstring> $filterExpression : "udp port 53" ;
			expression<float64> $initDelay : 0f ;
		graph
			(stream<rstring filename> DirScan_Stream) as DirScan = DirectoryScan()
			{
				param
					directory : $directory ;
					pattern : $pattern ;
					initDelay : $initDelay ;
			}

			(stream<PacketType> PktFileSrc_Stream) as PktFileSrc =
				PacketFileSource(DirScan_Stream, Beacon_11_out0)
			{
				param
					inputFilter : $filterExpression ;
					metricsInterval : 0.0 ;
				output
					PktFileSrc_Stream : captureTime = createTimestamp((int64)
						CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u), dstAddress =
						convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()), dnsMessage =
						PAYLOAD_DATA() ;
			}

			(stream<DPDNSResponseMessage_t> DNSMsgParser_Stream) as DNSMsgParser =
				DNSMessageParser(PktFileSrc_Stream)
			{
				param
					messageAttribute : dnsMessage ;
					outputFilters : DNS_RESPONSE_FLAG() && ! parseError() ;
				output
					DNSMsgParser_Stream : questionName = DNS_QUESTION_NAME(), responseCode =
						DNS_RESPONSE_CODE(), answerData = DNS_ANSWER_DATA(), additionalData =
						DNS_ADDITIONAL_DATA() ;
			}

			(stream<rstring filename> Beacon_11_out0) as Beacon_11 = Beacon()
			{
				logic
					state :
					{
						mutable int32 stateVariable = 0 ;
					}

				param
					period : 8.0 ;
				output
					Beacon_11_out0 : filename =
						"/home/streamsadmin/git/samples/cybersecurity/DomainProfilingSamples/data/domain_profiling_sample.pcap" ;
			}

	}




