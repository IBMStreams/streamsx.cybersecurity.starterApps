namespace com.ibm.streamsx.cybersecurity.sample ;

use com.ibm.streamsx.network.parse::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.enrichment::* ;
use com.ibm.streams.cybersecurity.types::* ;
use com.ibm.streams.cybersecurity.tagging::BWListTagger ;
use com.ibm.streams.cybersecurity.analytics::* ;

composite DomainProfilingViz
{
	type
		DomainProfilingExtendedResult_t = DomainProfilingResult_t,
			tuple<set<rstring> uniqueHosts> ;
	graph
		(stream<DPDNSResponseMessage_t, tuple<BWListTag_e domainTags,
			list<BWListTag_e> ipTags>> BWTaggerOp_Stream) as BWTaggerOp =
			BWListTagger(DPSrcOp_Stream)
		{
			param
				domainAttr : questionName ;
				ipAttr : answerDataIPv4, additionalData ;
				blackDomainFile : "bwlist/domainBlackList.txt" ;
				blackIPFile : "bwlist/ipBlackList.txt" ;
				whiteDomainFile : "bwlist/domainWhiteList.txt" ;
				whiteIPFile : "bwlist/ipWhiteList.txt" ;
			output
				BWTaggerOp_Stream : domainTags = getDomainTags(), ipTags = getIPTags() ;
		}

		(stream<DomainProfilingInput_t> BWFilter_Stream) as BWFilter =
			Custom(BWTaggerOp_Stream as inPort0Alias)
		{
			logic
				onTuple inPort0Alias :
				{
					mutable BWListTag_e tag_ = nonMatched ;
					if(domainTags == blackList || has(ipTags, blackList))
					{
						tag_ = blackList ;
					}

					else if(domainTags == whiteList || has(ipTags, whiteList))
					{
						tag_ = whiteList ;
					}

					if(tag_ != whiteList)
					{
						mutable BWFilter_Stream outTuple =(BWFilter_Stream) { } ;
						assignFrom(outTuple, inPort0Alias) ;
						outTuple.bwTag = tag_ ;
						submit(outTuple, BWFilter_Stream) ;
					}

				}

			}

		(stream<DomainProfilingResult_t,
			tuple<list<DomainProfilingInput_t> windowedTuples>>
			DomainProfilingOp_Stream) as DomainProfilingOp =
				DomainProfiling(BWFilter_Stream)
			{
				window
					BWFilter_Stream : tumbling, time(20.0), partitioned ;
				param
					warmupFile : "etc/DomainProfilingWarmup.txt" ;
				output
					DomainProfilingOp_Stream : domain = getDomain(), profileLastUpdate =
						getProfileLastUpdate(), predictedClass = getPredictedClass(),
						featureVector = getFeatureVector(), windowedTuples =
						getWindowedTuples() ;
			}

		(stream<DomainProfilingExtendedResult_t> ExtendedData_Stream) as
			ExtendedData = Custom(DomainProfilingOp_Stream)
			{
				logic
					onTuple DomainProfilingOp_Stream :
					{
						mutable set<rstring> uniqueHosts_ = { } ;
						mutable DomainProfilingExtendedResult_t
							outTuple_ =(DomainProfilingExtendedResult_t) { } ;
						assignFrom(outTuple_, DomainProfilingOp_Stream) ;
						for(DomainProfilingInput_t dpi in
							DomainProfilingOp_Stream.windowedTuples)
						{
							insertM(uniqueHosts_,
								com.ibm.streamsx.network.ipv4::convertIPV4AddressNumericToString(dpi.dstAddress)) ;
						}

						outTuple_.uniqueHosts = uniqueHosts_ ;
						submit(outTuple_, ExtendedData_Stream) ;
					}

			}

		(stream<DPDNSResponseMessage_t> DPSrcOp_Stream) as DPSrcOp = DPLiveSrc()
			{
			}

		() as DPCounts_12 = DPCounts(ExtendedData_Stream)
			{
				config
					placement : partitionColocation("dpVizCount") ;
			}

		() as DPSuspiciousList_13 = DPSuspiciousList(ExtendedData_Stream)
			{
				config
					placement : partitionColocation("dpVizSusp") ;
			}

	}

	public composite DPCounts(input In0 )
	{
		param
			expression<float64> $dataTTL : 300f ;
			expression<float64> $updateTime : 3f ;
		graph
			() as DomainProfilingMetricsOp = MetricsSink(Aggregate_7_out0 as
				inPort0Alias)
			{
				logic
					state :
					{
						mutable int64 benign = 0l ;
						mutable int64 suspicious = 0l ;
					}

					onTuple inPort0Alias :
					{
						if(inPort0Alias.predictedClass == "benign") benign =(int64) count ;
						else if(inPort0Alias.predictedClass == "suspicious") suspicious =(int64)
							count ;
					}

					param
						metrics : benign, suspicious ;
						names : "benign", "suspicious" ;
				}

			(stream<rstring predictedClass> Functor_6_out0) as Functor_6 = Functor(In0
					as inPort0Alias)
				{
					output
						Functor_6_out0 : predictedClass = In0.predictedClass ;
				}

			(stream<rstring predictedClass, int32 count> Aggregate_7_out0) as
				Aggregate_7 = Aggregate(Functor_6_out0 as inPort0Alias)
				{
					window
						inPort0Alias : sliding, time(120.0), time(3.0), partitioned ;
					param
						partitionBy : predictedClass ;
					output
						Aggregate_7_out0 : predictedClass = Any(inPort0Alias.predictedClass),
							count = Count() ;
				}

		}

		type CollectContext = set<rstring> ips ;
		boolean init(mutable CollectContext c)
		{
			clearM(c.ips) ;
			return false ;
		}

		boolean process(set<rstring> userIPs, mutable CollectContext c)
		{
			for(rstring ip in userIPs)
			{
				insertM(c.ips, ip) ;
			}

			return false ;
		}

		int32 result(mutable CollectContext c)
		{
			return size(c.ips) ;
		}

		composite DPSuspiciousList(input In0 )
		{
			param
				expression<float64> $dataTTL : 300f ;
				expression<float64> $updateTime : 3f ;
			graph
				(stream<rstring domain, set<rstring> userIPs> Functor_7_out0) as
					Functor_7 = Functor(In0 as inPort0Alias)
				{
					param
						filter : inPort0Alias.predictedClass == "suspicious" ;
					output
						Functor_7_out0 : domain = inPort0Alias.domain, userIPs =
							inPort0Alias.uniqueHosts ;
				}

				@view(name = "SuspiciousDomainsView", port = Aggregate_8_out0, sampleSize =
					50, bufferSize = 50, activateOption = firstAccess)
				(stream<rstring domain, int32 domainCount, int32 uniqueUserCount>
					Aggregate_8_out0) as Aggregate_8 = Aggregate(Functor_7_out0 as
					inPort0Alias)
				{
					logic
						state :
						{
							mutable CollectContext context ;
						}

					window
						inPort0Alias : sliding, time($dataTTL), time($updateTime), partitioned ;
					param
						partitionBy : Functor_7_out0.domain ;
					output
						Aggregate_8_out0 : domain = Any(Functor_7_out0.domain), domainCount =
							Count(), uniqueUserCount = Custom(init(context), process(userIPs,
							context), result(context)) ;
				}

				() as Custom_8 = Custom(Aggregate_8_out0 as inputStream)
				{
					logic
						onTuple inputStream :
						{
						}

				}

		}










