namespace com.ibm.streamsx.cybersecurity.sample ;

use com.ibm.streamsx.network.parse::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.enrichment::* ;
use com.ibm.streams.cybersecurity.types::* ;
use com.ibm.streams.cybersecurity.tagging::BWListTagger ;
use com.ibm.streams.cybersecurity.analytics::* ;
use com.ibm.streams.cybersecurity.types::HostProfilingInput_t ;
use com.ibm.streams.cybersecurity.types::HostProfilingResult_t ;
use com.ibm.streams.cybersecurity.adapters::QRadarSink ;

composite HostProfilingQRadar
{
	graph
		(stream<HostProfilingInput_t> BWTaggerOp_Stream) as BWTaggerOp =
			BWListTagger(HPSrcOp_Stream)
		{
			param
				domainAttr : questionName ;
				blackDomainFile : "bwlist/domainBlackList.txt" ;
				blackIPFile : "bwlist/ipBlackList.txt" ;
				whiteDomainFile : "bwlist/domainWhiteList.txt" ;
				whiteIPFile : "bwlist/ipWhiteList.txt" ;
			output
				BWTaggerOp_Stream : bwTag = getDomainTags()[0] ;
		}

		(stream<HostProfilingInput_t> DomainProfilingInput_Stream) as BWFilter =
			Filter(BWTaggerOp_Stream)
		{
			param
				filter : bwTag != whiteList ;
		}

		(stream<HostProfilingResult_t> HostProfilingOp_Stream) as HostProfilingOp =
			HostProfiling(DomainProfilingInput_Stream as BWFilter_Stream)
		{
			window
				BWFilter_Stream : tumbling, time(20.0), partitioned ;
			param
				warmupFile : "etc/HostProfilingWarmup.txt" ;
			output
				HostProfilingOp_Stream : host = getHost(), profileLastUpdate =
					getProfileLastUpdate(), predictedClass = getPredictedClass(),
					featureVector = getFeatureVector() ;
		}

		(stream<HPDNSResponseMessage_t> HPSrcOp_Stream) as HPSrcOp = HPSrcQRadar()
		{
			param
				directory : dataDirectory() ;
				pattern : "host_profiling_sample.pcap" ;
		}

		(stream<HostProfilingResult_t> Suspicious_Stream) as PredictionFilter =
			Filter(HostProfilingOp_Stream as inputStream)
		{
			param
				filter : predictedClass == "suspicious" ;
		}

		() as QRadarSink_11 = QRadarSink(Suspicious_Stream)
		{
			param
				host : getSubmissionTimeValue("qradar.host") + ":" +
					getSubmissionTimeValue("qradar.port") ;
				eventID : "ANOMALY_HOST_PROFILE_DISCOVERED" ;
		}

}

composite HPSrcQRadar(output DNSMsgParser_Stream )
{
	param
		expression<rstring> $directory ;
		expression<rstring> $pattern : "" ;
		expression<rstring> $filterExpression : "udp port 53" ;
		expression<float64> $initDelay : 0f ;
	graph
		(stream<rstring filename> DirScan_Stream) as DirScan = DirectoryScan()
		{
			param
				directory : $directory ;
				pattern : $pattern ;
				initDelay : $initDelay ;
		}

		(stream<PacketType> PktFileSrc_Stream) as PktFileSrc =
			PacketFileSource(DirScan_Stream)
		{
			param
				inputFilter : $filterExpression ;
				metricsInterval : 0.0 ;
			output
				PktFileSrc_Stream : captureTime = createTimestamp((int64)
					CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u), dstAddress = IPV4_DST_ADDRESS(), 
					dnsMessage = PAYLOAD_DATA() ;
		}

		(stream<DPDNSResponseMessage_t> DNSMsgParser_Stream) as DNSMsgParser =
			DNSMessageParser(PktFileSrc_Stream)
		{
			param
				messageAttribute : dnsMessage ;
				outputFilters : DNS_RESPONSE_FLAG() && ! parseError() ;
			output
				DNSMsgParser_Stream : questionName = DNS_QUESTION_NAME(), responseCode =
					DNS_RESPONSE_CODE() ;
		}

}




