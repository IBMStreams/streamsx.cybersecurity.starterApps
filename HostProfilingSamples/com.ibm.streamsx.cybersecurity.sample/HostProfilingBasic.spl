namespace com.ibm.streamsx.cybersecurity.sample ;

use com.ibm.streams.cybersecurity.types::* ;
use com.ibm.streams.cybersecurity.tagging::BWListTagger ;
use com.ibm.streams.cybersecurity.analytics::* ;
use com.ibm.streamsx.network.parse::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.enrichment::* ;
use com.ibm.streams.cybersecurity.types::HPDNSResponseMessage_t ;
use com.ibm.streamsx.network.source::PacketFileSource ;
use com.ibm.streamsx.network.parse::DNSMessageParser ;

composite HostProfilingBasic
{
	graph
		(stream<HPDNSResponseMessage_t, tuple<list<BWListTag_e> ipTags,
			BWListTag_e domainTags>> BWTagger_Stream) as BWTagger =
			BWListTagger(HPSrcOp_Stream as inPort0Alias)
		{
			param
				domainAttr : questionName ;
				ipAttr : concat(answerData, additionalData) ;
				blackDomainFile : "bwlist/domainBlackList.txt" ;
				blackIPFile : "bwlist/ipBlackList.txt" ;
				whiteDomainFile : "bwlist/domainWhiteList.txt" ;
				whiteIPFile : "bwlist/ipWhiteList.txt" ;
			output
				BWTagger_Stream : domainTags = getDomainTags(), ipTags = getIPTags() ;
		}

		(stream<HostProfilingInput_t> BWFilter_Stream) as BWFilter =
			Custom(BWTagger_Stream as inPort0Alias)
		{
			logic
				onTuple inPort0Alias :
				{
					mutable BWListTag_e tag_ = nonMatched ;
					if(domainTags == blackListDomain)
					{
						tag_ = blackListDomain ;
					}

					else if(has(ipTags, blackListIP))
					{
						tag_ = blackListIP ;
					}

					else if(domainTags == whiteList || has(ipTags, whiteList))
					{
						tag_ = whiteList ;
					}

					if(tag_ != whiteList)
					{
						mutable BWFilter_Stream outTuple =(BWFilter_Stream) { } ;
						assignFrom(outTuple, inPort0Alias) ;
						outTuple.bwTag = tag_ ;
						submit(outTuple, BWFilter_Stream) ;
					}

				}

			}

		(stream<HostProfilingResult_t> HostProfilingOp_Stream) as HostProfilingOp =
				HostProfiling(BWFilter_Stream as inPort0Alias)
			{
				window
					inPort0Alias : tumbling, time(20.0), partitioned ;
				param
					warmupFile : "etc/HostProfilingWarmup.txt" ;
				output
					HostProfilingOp_Stream : featureVector = getFeatureVector(), host =
						getHost(), profileLastUpdate = getProfileLastUpdate(), predictedClass =
						getPredictedClass() ;
			}

		(stream<HPDNSResponseMessage_t> HPSrcOp_Stream) as HPSrcOp = HPSrc()
			{
				param
					directory : dataDirectory() ;
					pattern : "host_profiling_sample.pcap" ;
			}

		(stream<HostProfilingResult_t> Suspicious_Stream ;
			stream<HostProfilingResult_t> Benign_Stream) as PredictionFilter =
				Filter(HostProfilingOp_Stream as inputStream)
			{
				param
					filter : predictedClass == "suspicious" ;
			}

		() as SuspiciousSink = FileSink(Suspicious_Stream as inPort0Alias)
			{
				param
					file : "hpresults_suspicious.csv" ;
					format : csv ;
					quoteStrings : false ;
			}

		() as BenignSink = FileSink(Benign_Stream)
			{
				param
					file : "hpresults_benign.csv" ;
					format : csv ;
					quoteStrings : false ;
			}

	}

	composite HPSrc(output DNSMsgParser_Stream )
	{
		param
			expression<rstring> $directory ;
			expression<rstring> $pattern : "" ;
			expression<rstring> $filterExpression : "udp port 53" ;
			expression<float64> $initDelay : 0f ;
		graph
			(stream<rstring filename> DirScan_Stream) as DirScan = DirectoryScan()
			{
				param
					directory : $directory ;
					pattern : $pattern ;
					initDelay : $initDelay ;
			}

			(stream<PacketType> PktFileSrc_Stream) as PktFileSrc =
				PacketFileSource(DirScan_Stream)
			{
				param
					inputFilter : $filterExpression ;
					metricsInterval : 0.0 ;
				output
					PktFileSrc_Stream : captureTime = createTimestamp((int64)
						CAPTURE_SECONDS(), CAPTURE_MICROSECONDS() * 1000u), dstAddress =
						convertIPV4AddressNumericToString(IPV4_DST_ADDRESS()), dnsMessage =
						PAYLOAD_DATA() ;
			}

			(stream<HPDNSResponseMessage_t> DNSMsgParser_Stream) as DNSMsgParser =
				DNSMessageParser(PktFileSrc_Stream)
			{
				param
					messageAttribute : dnsMessage ;
					outputFilters : DNS_RESPONSE_FLAG() && DNS_RESPONSE_CODE() != 0ub && ! parseError() ;
				output
					DNSMsgParser_Stream : questionName = DNS_QUESTION_NAME(), responseCode =
						DNS_RESPONSE_CODE(), answerData = DNS_ANSWER_DATA(), additionalData =
						DNS_ADDITIONAL_DATA() ;
			}

	}





